---
import { type CollectionEntry, render } from "astro:content";

import Masthead from "@/components/blog/Masthead.astro";
import TOC from "@/components/blog/TOC.astro";
import WebMentions from "@/components/blog/webmentions/index.astro";

import BaseLayout from "./Base.astro";

interface Props {
	post: CollectionEntry<"post">;
}

const { post } = Astro.props;
const { ogImage, title, description, updatedDate, publishDate } = post.data;
const socialImage = ogImage ?? `/og-image/${post.id}.png`;
const articleDate = updatedDate?.toISOString() ?? publishDate.toISOString();
const { headings, remarkPluginFrontmatter } = await render(post);
const readingTime: string = remarkPluginFrontmatter.minutesRead;

// Determine the actual updated date to show:
// 1. If updatedDate is manually set in frontmatter, use that (takes priority)
// 2. Otherwise, use git lastModified, but only if:
//    a) It's significantly different from publishDate (more than 1 day)
//    b) It's after the URL migration cutoff (to ignore move-only commits)
const gitLastModified = new Date(remarkPluginFrontmatter.lastModified);
const ONE_DAY_MS = 24 * 60 * 60 * 1000;
const daysSincePublish = (gitLastModified.getTime() - publishDate.getTime()) / ONE_DAY_MS;

// Cutoff: ignore git changes before this date (URL migration happened on 2025-10-28)
const URL_MIGRATION_CUTOFF = new Date("2025-10-28T00:00:00Z");
const isAfterMigration = gitLastModified > URL_MIGRATION_CUTOFF;

const finalUpdatedDate =
	updatedDate || (daysSincePublish > 1 && isAfterMigration ? gitLastModified : null);

// Get the source file path for GitHub link from the remark plugin
const sourcePath = remarkPluginFrontmatter.gitSourcePath as string;
---

<BaseLayout
	meta={{
		articleDate,
		description,
		ogImage: socialImage,
		title,
	}}
	sourcePath={sourcePath}
>
	<article class="grow break-words" data-pagefind-body>
		<header id="blog-hero" class="mb-12">
			<Masthead content={post} readingTime={readingTime} updatedDate={finalUpdatedDate} />
		</header>
		<div class="flex flex-col gap-10 lg:flex-row lg:items-start lg:justify-between">
			{!!headings.length && <TOC headings={headings} />}
			<div
				class="prose prose-lg md:prose-xl prose-headings:text-accent-2 sm:prose-th:before:content-none max-w-full lg:max-w-none lg:flex-1"
			>
				<slot />
				<WebMentions />
			</div>
		</div>
	</article>
	<button
		class="hover:border-accent active:border-accent fixed end-4 bottom-20 z-90 flex h-10 w-10 translate-y-28 cursor-pointer items-center justify-center rounded-full border-2 border-transparent bg-zinc-200 text-3xl opacity-0 transition-all transition-discrete duration-300 data-[show=true]:translate-y-0 data-[show=true]:opacity-100 sm:end-30 sm:h-12 sm:w-12 dark:bg-zinc-700"
		data-show="false"
		id="to-top-btn"
	>
		<span class="sr-only">Back to top</span>
		<svg
			aria-hidden="true"
			class="h-6 w-6"
			fill="none"
			focusable="false"
			stroke="currentColor"
			stroke-width="2"
			viewBox="0 0 24 24"
			xmlns="http://www.w3.org/2000/svg"
		>
			<path d="M4.5 15.75l7.5-7.5 7.5 7.5" stroke-linecap="round" stroke-linejoin="round"></path>
		</svg>
	</button>
</BaseLayout>

<script>
	const scrollBtn = document.getElementById("to-top-btn") as HTMLButtonElement;
	const targetHeader = document.getElementById("blog-hero") as HTMLDivElement;

	function callback(entries: IntersectionObserverEntry[]) {
		entries.forEach((entry) => {
			// only show the scroll to top button when the heading is out of view
			scrollBtn.dataset.show = (!entry.isIntersecting).toString();
		});
	}

	scrollBtn.addEventListener("click", () => {
		document.documentElement.scrollTo({ behavior: "smooth", top: 0 });
	});

	const observer = new IntersectionObserver(callback);
	observer.observe(targetHeader);
</script>
